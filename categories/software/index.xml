<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on akenji&#39;s lab</title>
    <link>https://akenji3.github.io/categories/software/</link>
    <description>Recent content in software on akenji&#39;s lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>akenji.1118@gmail.com (Kenji Arai)</managingEditor>
    <webMaster>akenji.1118@gmail.com (Kenji Arai)</webMaster>
    <lastBuildDate>Fri, 14 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://akenji3.github.io/categories/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugoで画像ファイルを扱う、カテゴリ追加</title>
      <link>https://akenji3.github.io/post/20200814_hugo_image_category/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200814_hugo_image_category/</guid>
      <description>Hugoで画像ファイルを埋め込んだ記事、カテゴリを追加 モチベーション GitHub PagesとHugoで記事を書き始めたのが、数日前。
何通かポスト（記事を書いて）して、次の2つのことがやりたくなって、ちょっと試してできるようになったので、記事としてまとめる。
 記事の画像ファイルを埋め込む 記事をカテゴリで分類する  自分が使用しているテーマは、&amp;ldquo;beautifulhugo&amp;quot;なので、その環境下での試したこと。
画像ファイルを記事に埋め込む ローカルな環境で、画像ファイルを埋め込む場合は、例えば次のように記述すると思う。
![画像名](格納ファイルへのパス/画像ファイル.pgn) Hugoでは、画像ファイルは、config.tomlのあるディレクトリ（自分の場合、~/workspace/blog）直下にある、staticディレクトリ配下に格納するのが普通らしい。
自分は、static配下にimagesディレクトリを作成し、その下に記事毎のディレクトを作成して、その配下にイメージファイルを格納した。例えば、この記事の画像の場合は、次の通り。
~/workspace/blog/static/images/20200813_MESA_install/Density_Temp.png Typoraで記事を作成中に、画像のURL入力を求められるが、その際は、上記のフルパスを入力する。GitHub Pagesにデプロイするまでに、/images以下のみとする（・・・/staticまでを削除する）。
カテゴリ分類を追加する カテゴリを追加するには、config.tomlに以下を追加するだけでOK。
もちろん記事のYAML front matterに&amp;quot;Categories: [&amp;ldquo;category1&amp;rdquo;,&amp;hellip;]&amp;ldquo;が必要。
[taxonomies] category = &amp;#34;categories&amp;#34; tag = &amp;#34;tags&amp;#34; 右上のメニューに&amp;quot;CATEGORIES&amp;quot;と表示するため、同じくconfig.tomlに以下を追加。
[[menu.main]] name = &amp;#34;Categories&amp;#34; url = &amp;#34;categories&amp;#34; weight = 3 urlの&amp;quot;categories&amp;quot;は必ず小文字。これは/pabulic/categoriesに対応しているからだと思われる。
自分は、これを&amp;quot;Categories&amp;quot;としていて、正常に動作せず、少しハマった。</description>
    </item>
    
    <item>
      <title>MESA(Modules for Experiments in Stellar Astrophysics)のインストール</title>
      <link>https://akenji3.github.io/post/20200813_mesa_install/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200813_mesa_install/</guid>
      <description>MESAをインストールする はじめに 我々のまわりを構成している物質（原子）のほとんどは、夜空に輝く星（恒星）の進化過程でその内部で核融合反応により作られたものだ。天文学に興味を持った頃、そのような事実を知って、とっても興味を持った。自分の体を構成する炭素、今飲んでいる水を構成する酸素など、全て恒星が作ったものだと。その興味そのまま、今に至っている。
星の進化をシミュレーションするソフトウェアが、今回のテーマであるMESA(Modules for Experiments in Stellar Astrophysics)だ。
MESA関連情報  MESAのページ　本家のページ MESA SDKのページ　MESAインストールに必要なSDKのページ MESAマーケットプレイス　MESAを使ったモデルの共有場所 2019 MESA Summer School　ここから過去のSummer Schoolも参照できる。  全て、本家のページから辿れる。今後、興味深いページを見つけたらここに追加する。
MESAインストール手順 MESAのインストールは、次の2つのステップで完了する。
 MESA SDKのインストール MESA本体のインストール  以下の説明は、自分の使用環境であるUbuntu 18.04.5を前提としいる。したがって、「Linux(Intel)」の節に従って実行した。またシェルについてはbashを使っているので、Bourne shellの項に従った。
MESA SDKのインストール MESA SDKのページの「Linux(Intel)」の記述通りに進めれば、特に問題もなく、インストールできた。
手順は次の通り。
 最新版（current）のMESA SDKをダウンロードする。現時点の最新版は、March 25 2020のリリース12778である。自分もこれをダウンロードした。 ダウンロードしたtarファイルを解凍。次のコマンドは、自分のホームディレクトリにmesasdkディレクトを作成しそこに解凍する。  $ tar xvfz mesasdk-x86_64-linux-20.3.2.tar.gz -C ~/  PATHを設定する。例えば、次の.bashrcに追加する。  export MESASDK_ROOT=~/mesasdk  事前に必要なこと「Prerequisites」の表に従って、パッケージをインストールする。 自分の場合は、既にインストールされていたパッケージもあるので、実質的には、次を実行したことになる。 ともかく、何も考えずに、上から順番にパッケージ名をインストールすれば良い。  $ sudo apt install libx11-dev $ sudo apt install zlib1g-dev $ sudo apt install tcsh  SDKの初期化のため、以下を実行。  $ source $MESASDK_ROOT/bin/mesasdk_init.</description>
    </item>
    
    <item>
      <title>Raspberry PiのディスクをNFSマウントして使う</title>
      <link>https://akenji3.github.io/post/20200812_raspberrypi_nfs/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200812_raspberrypi_nfs/</guid>
      <description>Raspberry PiのディスクをNFSマウントして使う モチベーション 家で複数のPC、ワークステーションを使う場合、情報共有のためNASを利用するかと思う。自分も既にRaspberry Piにsambaをインストールして、NASとして使っている。
文書の共有はNASで十分だけど、linuxで（CGIの端末から）使う場合にローカルディスクと同様に使いたいと思っていた。
今回、上記のRaspberry Piに新たに外部ディスク（480GBのSSD）を追加して、NFSマウント先として運用する事にした。
環境 NFSマウントするサーバ、クライアント、および各々のディレクトリは、以下のとおり。
NFSサーバ  Raspberry Pi 3B+  raspberrypi 4.19.66-v7- /export/nfs配下をNFSマウント用に公開    NFSクライアント  HP Z820  Ubuntu 18.02.2 NFSマウントする自分のディレクトリは/mnt/nfs   HP Z620  Ubuntu 18.04.2 NFSマウントする自分のディレクトリは/mnt/nfs   MacBook Pro  macOS Catalina バージョン 10.15.6 NFSマウントする自分のディレクトリは/opt/nfs マウントするディレクトリが、他のクライアント異なっている理由は後述する。    NFSサーバの設定 外部ディスクを接続 詳細は省略するが、新規の外部ディスク（USB接続）をRaspberry Piから使うには、次のような手順で行う。
 パーティション設定（例えば、sudo fdisk /dev/sdc) フォーマット（ext4でフォーマットするには、sudo mkfs.ext4 /dev/sdc1） 必要ならボリュームラベル設定（例えば、sudo e2label /dev/sdc1 ssd480）  上記の例でのデバイス/dev/sdc1と後で説明で出てくるデバイス/dev/sda1と異なっているのは、使用している外付けUSBデバイスを変更したため。
設定手順の概要 NFSサーバー設定手順の概要は次の通り。</description>
    </item>
    
    <item>
      <title>GitHub Pagesにブログを公開 - 静的サイトジェネレータ・Hugo使用</title>
      <link>https://akenji3.github.io/post/20200811_blog_ongithub/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200811_blog_ongithub/</guid>
      <description>GitHub Pagesにブログを公開 - 静的サイトジェネレータ・Hugo使用 モチベーション 自分の興味ある分野について調査したり、試したりした内容をまとめ、保管する場所を考えていた。記述する際には、インターネットのページ参照、シェルプロなどのソースファイルの表示、更には数式も表現できるなどを考えて、マークダウンで記述する事にした。
そのように考えている時に、マークダウンならGitHubが思い浮かび、GitHub Pagesに保管／公開する事にした。
GitHub Pagesは、GitHubがユーザーに提供している静的なウェブページのためのウェブホスティングサービスである。（ウィキペディアより）
参照ページに感謝 このページを参考にした。感謝。
更に、こちらのページも参考にした。同じく感謝。
また、これからの作業を始める前にどのようなページにしたいかを考え、どんなテーマにするかをこちらのページ参考に考えておく。
クライアント環境 自分のクライアント環境は、次のとおり。
 MacBook Pro（2016） macOS Catalina バージョン10.15.6  GitHub Pages用のリポジトリ作成 先ずは、公開先のリポジトリを用意する。この節の作業は、ブラウザで行う。
前提として、GitHubのアカウントは既に持っているものとする。
&amp;ldquo;GitHub アカウント作成&amp;quot;で、検索すれば、qiitaのページ等、かず多くのページが参考にできる。
次の手順で、GitHub Pagesで使用するリポジトリを作成する。
 GitHubにサインインし、「Your repositories」に（トップレベルに）移動 右上の＋マークのメニューから「New repository」でリポジトリ作成へ 「Create a new repository」のページで次を入力する  Repository name:	foo.github.io（fooは自分のアカウント名） その他は、ディフォルトのまま 「Create repository」でリポジトリ作成    Hugoをインストール、hugoのプロジェクトを作成 ここからは、Macのターミナルでの作業。
次の手順で、hugoをインストールし、作業するプロジェクト（この例では、blogとのディレクトリ）を作成する。
$ brew install hugo $ cd ~/workspace $ mkdir blog $ hugo new site blog gitリポジトリの初期化とテーマ選定 自分は、「beautifulhugo」と言うシンプルなテーマを選定した。以下は、このテーマを前提に進める。</description>
    </item>
    
    <item>
      <title>jupyterlabをsingularityコンテナで起動する</title>
      <link>https://akenji3.github.io/post/20200810_jupyterlab/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200810_jupyterlab/</guid>
      <description>jupyterlabをsingularityコンテナで起動する 目的   Jupyterlabコンテナをサーバで起動し、リモートのMBPでjupyterlabを使う
  コンテナは、dockerも作成するが、通常使用としてはsingularityとする。
  今回は、家庭内のLAN環境内での使用とする。
  使用環境 サーバ（HP-Z820）  GPU0: Geforce GTX 1080 GPU1: Quadro K2000 driver ver.: 440.95.01 Ubuntu 18.04.4 LTS  クライアント（Mac Book Pro）  macOS Catalina 10.15.5  参考ページ このページを参考にした。大変参考になり、感謝。
手順 作業用ディレクトリを作成、必要ファイルを準備 $ mkdir pytorch-lab $ cd pytorch-lab 上記参考ページの記事を参考に、Dockerfileをこのディレクトリに作成。ベースとなるイメージは、ドライバーバージョンに合う比較的に新しいCUDAバージョンアップのpytorchを選択した。以下がDockerfileの内容。
FROM pytorch/pytorch:1.5.1-cuda10.1-cudnn7-runtime # Install required libraries RUN conda config --add channels pytorch \ &amp;amp;&amp;amp; conda config --append channels conda-forge \ &amp;amp;&amp;amp; conda update --all --yes --quiet \ &amp;amp;&amp;amp; conda install --yes --quiet \ ipywidgets \ jupyterlab \ matplotlib \ nodejs \ opencv \ pandas \ scikit-learn \ seaborn \ sympy \ &amp;amp;&amp;amp; conda clean --all -f -y # Install jupyter extensions RUN jupyter nbextension enable --py --sys-prefix widgetsnbextension \ &amp;amp;&amp;amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager COPY jupyter_notebook_config.</description>
    </item>
    
  </channel>
</rss>