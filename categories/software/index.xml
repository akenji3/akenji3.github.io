<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on akenji&#39;s lab</title>
    <link>https://akenji3.github.io/categories/software/</link>
    <description>Recent content in software on akenji&#39;s lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>akenji.1118@gmail.com (Kenji Arai)</managingEditor>
    <webMaster>akenji.1118@gmail.com (Kenji Arai)</webMaster>
    <lastBuildDate>Sat, 29 Oct 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://akenji3.github.io/categories/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>姫野ベンチマークをTITAN Vで実行</title>
      <link>https://akenji3.github.io/post/20221029_himenobenchontitanv/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20221029_himenobenchontitanv/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;先週、NVIDIA TITAN Vをヤフオクで入手した。その実力次第を知るため、姫野ベンチをOpenACCでコンパイル・実行した。対象のGPUは初代TITAN、GTX 1080、RTX A4000、および今回入手したTITAN Vで、各単精度、倍精度での実行結果を測定した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stable Diffusion with Diffusers</title>
      <link>https://akenji3.github.io/post/20221010_stablediffuser/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20221010_stablediffuser/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;先月、&lt;a href=&#34;https://atmarkit.itmedia.co.jp/ait/articles/2209/16/news041.html&#34;&gt;@ITの記事&lt;/a&gt;で、Stable Diffusionという画像生成系のAIソフトを初めて知った。画像生成系は結果が目に見えるので、インパクトがある。Stable Diffusionについては、該当の記事を読んでいただければと思う。&lt;/p&gt;
&lt;p&gt;ここでは、Diffusersというライブラリを使って簡単にStable Diffusionを試せるjupyter-labを作成したので、紹介する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KubernetesでGPUクラスタ構築 〜 初めの一歩</title>
      <link>https://akenji3.github.io/post/20220919_kubernetes_1st_step/</link>
      <pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20220919_kubernetes_1st_step/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;約1ヵ月前に、&lt;a href=&#34;https://akenji3.github.io/post/20220821_kubernetes/&#34;&gt;この記事&lt;/a&gt;でkubernetesを使ってGPUクラスタを構築する記事を書いた。この時はGPUポッドがPending状態で動作しなかった。その後、とある方の助言もあって何とか動くようになったので、ここにまとめる。&lt;/p&gt;
&lt;p&gt;自分の環境では、あるノードを起動しないとGPUポッドが立ち上がらないという問題もあるし、更にノード内のGPU指定、更にノードの指定など、想定していることも出来ていないので、「はじめの一歩」とした。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ディスプレイ解像度を変更 〜 xrandr BadMatchへの対応</title>
      <link>https://akenji3.github.io/post/20220914_xrandr_badmach/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20220914_xrandr_badmach/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;Ubuntuをインストールした直後、ディプレイの解像度が1368x768になっていた。
端末（Terminal）を複数開いて作業する際の画面が狭く不便であったこと、せっかく1920x1080が表示できるディスプレイ（JAPANNEXT JN-MD-IPS1562FHDR）に接続しているのでそのサイズで表示させたかった。&lt;/p&gt;
&lt;p&gt;解像度を変更しようとしたが、少しハマったので、経緯をここにまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KubernetesでGPUクラスタ構築（未完成）</title>
      <link>https://akenji3.github.io/post/20220821_kubernetes/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20220821_kubernetes/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;Kubernetesの勉強を兼ねて、自宅に設定している複数のワークステーションを使って、GPUクラスタを作ることにチャレンジ。&lt;/p&gt;
&lt;p&gt;Kubernetesを初めて触った自分には、ハードルが高かった。というのもインストール時にのみ必要な操作か、（運用時の）クラスタ構築時に必要な操作か、を切り分けを資料で学びながらのインストールとなったので。&lt;/p&gt;
&lt;p&gt;現状では、GPUクラスタは動作していない！　この資料は、未完成です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ServerCatを試す</title>
      <link>https://akenji3.github.io/post/20220612_servercat/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20220612_servercat/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;以前から、自宅に設置しているワークステーションの状態を監視する良い機能（ソフトウェア）がないか？とおもっていた。先日、&lt;a href=&#34;https://japan.zdnet.com/article/35187907/&#34;&gt;この記事&lt;/a&gt;を読んで、今回紹介するServerCatを試してみようと思った。&lt;/p&gt;
&lt;p&gt;ポイントはiOS/MacOSから監視できるという点。&lt;del&gt;自分はMacOS版しか試していない。&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RTX A4000とGTX 1080との実行速度比較</title>
      <link>https://akenji3.github.io/post/20220424_wssperformance/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20220424_wssperformance/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://akenji3.github.io/post/20220422_rtx_a4000/&#34;&gt;この記事&lt;/a&gt;で&lt;a href=&#34;https://akenji3.github.io/post/20220318_dcgan_tutorial/&#34;&gt;DCGAN&lt;/a&gt;を実行し、これまで使っていたGTX 1080と比べ、新たに導入したRTX A4000が、体感的に速くなったと書いた。
また、自分の環境では、jupyterlabのnotebookをNFSサーバーに置いて、複数のサーバから使っている（同時実行は無しとの運用で）。以前から、notebookをローカル環境に置くと速くなると感じていた。&lt;/p&gt;
&lt;p&gt;今回は、GTX 1080／RTX A4000、NFS／ローカルの組み合わせで、実アプリの実行速度を計測する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA RTX A4000 (sm_86)上でPytorchを使う</title>
      <link>https://akenji3.github.io/post/20220422_rtx_a4000/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20220422_rtx_a4000/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;先日、&lt;a href=&#34;https://www.gdep.co.jp/&#34;&gt;ジーデップ・アドバンス&lt;/a&gt;（以下、GDEP）より、NVIDIA RTX A4000を購入した。GDEPは法人メインの取引だと思ってたので、個人購入可能かを質問し、可能と分かったので、何回かやり取り（見積り、入金）の後、先日入手した。&lt;/p&gt;
&lt;p&gt;早速A4000を使って、&lt;a href=&#34;https://akenji3.github.io/post/20220318_dcgan_tutorial/&#34;&gt;このDCGAN&lt;/a&gt;を試した。自分の環境で、A4000上でPytorchを使ったら、少しハマった。状況、原因、対応などについて、ここにまとめる。タイトルにある「sm_86」は今回のキーワード！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【失敗】Ubuntu 20.04でのChrome Remote Desktop</title>
      <link>https://akenji3.github.io/post/20220416_chromeremotedesktop/</link>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20220416_chromeremotedesktop/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;とある方から、自宅のサーバを自宅外からアクセス手段として、Chrome Remote Desktopを使っていると聞いたことに、インスパイアされ、自分も挑戦してみることにした。
自分は未だリモートデスクトップを使えていないので、この記事は動いていないで終わる。失敗も記録しておこうかと思い、この記事を作成した。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amazon SageMaker Studio Labを試す</title>
      <link>https://akenji3.github.io/post/20211231_sagemakerstudiolab/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20211231_sagemakerstudiolab/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;自分でオンプレミスでサーバを構築して、そこでJupyterlabサーバを設定してメインに使っている（&lt;a href=&#34;https://akenji3.github.io/post/20200810_jupyterlab/&#34;&gt;こちら&lt;/a&gt;や&lt;a href=&#34;https://akenji3.github.io/post/20210905_definition_file/&#34;&gt;こちら&lt;/a&gt;）。そうは言っても、GCPから提供されている&lt;a href=&#34;https://colab.research.google.com/notebooks/welcome.ipynb?hl=ja&#34;&gt;Google Colaboratory&lt;/a&gt;を使ったこともある。&lt;/p&gt;
&lt;p&gt;この記事では、最近発表された&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/now-in-preview-amazon-sagemaker-studio-lab-a-free-service-to-learn-and-experiment-with-ml/&#34;&gt;Amazon SageMaker Studio Lab&lt;/a&gt;を試してみたので、使えるようになるまでの手順や使った感想をまとめたい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OpenMPIをインストール</title>
      <link>https://akenji3.github.io/post/20211226_openmpi_install/</link>
      <pubDate>Sun, 26 Dec 2021 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20211226_openmpi_install/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;分散処理の実験をやってみたかったので、かねてからインストールしようと思っていたOpenMPIをインストールする。
ホスト上のアプリケーションから使えるだけでなく、Singularityで動作するアプリケーションでOpenMPIを使えるようにする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NVIDIA HPC SDKをSingularityコンテナ化する</title>
      <link>https://akenji3.github.io/post/20211024_hpc_sdk_singularity/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20211024_hpc_sdk_singularity/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;High Performance Computing用にコンパイラやGPU対応のライブラリ、ミドルウェアをパッケージとしてまとめている「&lt;a href=&#34;https://developer.nvidia.com/hpc-sdk&#34;&gt;NVIDIA HPC SDK&lt;/a&gt;」がある。このNVIDIA HPC SDKをSingularityコンテナとして利用したかったので、Singularityコンテナ作成手順をまとめた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ブログ記事でインライン形式の数式を表示させる</title>
      <link>https://akenji3.github.io/post/20210912_display_inline_math/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20210912_display_inline_math/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://akenji3.github.io/post/20210911_appliedmathematics/&#34;&gt;この記事&lt;/a&gt;で数式を使った記事を書いた。この時2つの問題が起こった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インライン形式で記述した数式が表示されない。ディスプレイ形式では表示されている。&lt;/li&gt;
&lt;li&gt;ディスプレイ形式の場合に、alignで複数行にならない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでは、上記の解決策をアップする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jupyterlabのsingularityコンテナを作る</title>
      <link>https://akenji3.github.io/post/20210905_definition_file/</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20210905_definition_file/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;以前の &lt;a href=&#34;https://akenji3.github.io/post/20200810_jupyterlab/&#34;&gt;この記事&lt;/a&gt;で、dockerコンテナからsingularityコンテナを作成し、jupyterlabをsingularityコンテナで動かす記事を書いた。&lt;/p&gt;
&lt;p&gt;今回、singularityへの理解を深めるため、definitionファイルからsingularityコンテナを作成した。この記事は、その際の情報をまとめたもの。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker,SingularityをUbuntu20.04にインストール</title>
      <link>https://akenji3.github.io/post/20210904_docker_singularity_install/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20210904_docker_singularity_install/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://akenji3.github.io/post/20210405_ubuntu2004_install/&#34;&gt;以前この記事&lt;/a&gt;でWorkstationにUbuntu 20.04をクリーンインストールしたことを書いた。そのWorkstationにDocker, Singularityをインストールしたので、自身のメモのため、以下に記事としてまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04をHP Z620にクリーン・インストール</title>
      <link>https://akenji3.github.io/post/20210405_ubuntu2004_install/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20210405_ubuntu2004_install/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;2年前の2019年2月にヤフオクで、購入したHP Z620 Workstation。購入後、 Ubuntu 18.04をインストールして、Docker, Singularity,コミュニティ版のPGIコンパイラーをインストールして、遊んで来た。&lt;/p&gt;
&lt;p&gt;今回、リリース後1年経つUbuntu 20.04をクリーン・インストール（まっさらな状態からのインストール）することにした。
自分自身の備忘のため、ここに記事としてまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YAML front matter</title>
      <link>https://akenji3.github.io/post/20201116_yaml_front_matter/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20201116_yaml_front_matter/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;久しぶりに、記事を書こうとして、マークアップエディタ（Typora）を起動するも、記事書けない。というのも、冒頭にタイトル、日付、タグ付けの入れ方を忘れたのだ。&lt;/p&gt;
&lt;p&gt;3ヶ月も経つと、以前にやったことを忘れてしまう。そのためのこのブログなので、細かいことも書いておこうと思い、今回は、ブログ記事の冒頭、いわゆる「YAML front matter」について簡単にまとめる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugoで設定３種</title>
      <link>https://akenji3.github.io/post/20200814_hugo_image_category_summary/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200814_hugo_image_category_summary/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;GitHub PagesとHugoで記事を書き始めたのが、数日前。&lt;/p&gt;
&lt;p&gt;何通かポスト（記事を書いて）して、次の3つのことがやりたくなって、ちょっと試してできるようになったので、記事としてまとめる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;記事の画像ファイルを埋め込む&lt;/li&gt;
&lt;li&gt;記事をカテゴリ（category）で分類する&lt;/li&gt;
&lt;li&gt;ブログトップでの記事要約（summary）を短くする&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>MESA(Modules for Experiments in Stellar Astrophysics)のインストール</title>
      <link>https://akenji3.github.io/post/20200813_mesa_install/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200813_mesa_install/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;我々のまわりを構成している物質（原子）のほとんどは、夜空に輝く星（恒星）の進化過程でその内部で核融合反応により作られたものだ。天文学に興味を持った頃、そのような事実を知って、とっても興味を持った。自分の体を構成する炭素、今飲んでいる水を構成する酸素など、全て恒星が作ったものだと。その興味そのまま、今に至っている。&lt;/p&gt;
&lt;p&gt;星の進化をシミュレーションするソフトウェアが、今回のテーマであるMESA(Modules for Experiments in Stellar Astrophysics)だ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raspberry PiのディスクをNFSマウントして使う</title>
      <link>https://akenji3.github.io/post/20200812_raspberrypi_nfs/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200812_raspberrypi_nfs/</guid>
      <description>&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;家で複数のPC、ワークステーションを使う場合、情報共有のためNASを利用するかと思う。自分も既にRaspberry Piにsambaをインストールして、NASとして使っている。&lt;/p&gt;
&lt;p&gt;文書の共有はNASで十分だけど、linuxで（CGIの端末から）使う場合にローカルディスクと同様に使いたいと思っていた。&lt;/p&gt;
&lt;p&gt;今回、上記のRaspberry Piに新たに外部ディスク（480GBのSSD）を追加して、NFSマウント先として運用する事にした。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub Pagesにブログを公開 - 静的サイトジェネレータ・Hugo使用</title>
      <link>https://akenji3.github.io/post/20200811_blog_ongithub/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200811_blog_ongithub/</guid>
      <description>モチベーション 自分の興味ある分野について調査したり、試したりした内容をまとめ、保管する場所を考えていた。記述する際には、インターネットのペー</description>
    </item>
    
    <item>
      <title>jupyterlabをsingularityコンテナで起動する</title>
      <link>https://akenji3.github.io/post/20200810_jupyterlab/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200810_jupyterlab/</guid>
      <description>目的 Jupyterlabコンテナをサーバで起動し、リモートのMBPでjupyterlabを使う コンテナは、dockerも作成するが、通常使用</description>
    </item>
    
  </channel>
</rss>