<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on akenji&#39;s lab</title>
    <link>https://akenji3.github.io/post/</link>
    <description>Recent content in Posts on akenji&#39;s lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>akenji.1118@gmail.com (Kenji Arai)</managingEditor>
    <webMaster>akenji.1118@gmail.com (Kenji Arai)</webMaster>
    <lastBuildDate>Tue, 11 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://akenji3.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub Pagesにブログを公開 - 静的サイトジェネレータ・Hugo使用</title>
      <link>https://akenji3.github.io/post/20200811_github%E3%81%AB%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200811_github%E3%81%AB%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99/</guid>
      <description>GitHub Pagesにブログを公開 - 静的サイトジェネレータ・Hugo使用 モチベーション 自分の興味ある分野について調査したり、試したりした内容をまとめ、保管する場所を考えていた。記述する際には、インターネットのページ参照、シェルプロなどのソースファイルの表示、更には数式も表現できるなどを考えて、マークダウンで記述する事にした。
そのように考えている時に、マークダウンならGitHubが思い浮かび、GitHub Pagesに保管／公開する事にした。
GitHub Pagesは、GitHubがユーザーに提供している静的なウェブページのためのウェブホスティングサービスである。（ウィキペディアより）
参照ページに感謝 このページを参考にした。感謝。
更に、こちらのページも参考にした。同じく感謝。
また、これからの作業を始める前にどのようなページにしたいかを考え、どんなテーマにするかをこちらのページ参考に考えておく。
クライアント環境 自分のクライアント環境は、次のとおり。
 MacBook Pro（2016） macOS Catalina バージョン10.15.6  GitHub Pages用のリポジトリ作成 先ずは、公開先のリポジトリを用意する。この節の作業は、ブラウザで行う。
前提として、GitHubのアカウントは既に持っているものとする。
&amp;ldquo;GitHub アカウント作成&amp;quot;で、検索すれば、qiitaのページ等、かず多くのページが参考にできる。
次の手順で、GitHub Pagesで使用するリポジトリを作成する。
 GitHubにサインインし、「Your repositories」に（トップレベルに）移動 右上の＋マークのメニューから「New repository」でリポジトリ作成へ 「Create a new repository」のページで次を入力する  Repository name:	foo.github.io（fooは自分のアカウント名） その他は、ディフォルトのまま 「Create repository」でリポジトリ作成    Hugoをインストール、hugoのプロジェクトを作成 ここからは、Macのターミナルでの作業。
次の手順で、hugoをインストールし、作業するプロジェクト（この例では、blogとのディレクトリ）を作成する。
$ brew install hugo $ cd ~/workspace $ mkdir blog $ hugo new site blog gitリポジトリの初期化とテーマ選定 自分は、「beautifulhugo」と言うシンプルなテーマを選定した。以下は、このテーマを前提に進める。</description>
    </item>
    
    <item>
      <title>jupyterlabをsingularityコンテナで起動する</title>
      <link>https://akenji3.github.io/post/20200810_jupyterlab/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      <author>akenji.1118@gmail.com (Kenji Arai)</author>
      <guid>https://akenji3.github.io/post/20200810_jupyterlab/</guid>
      <description>jupyterlabをsingularityコンテナで起動する 目的   Jupyterlabコンテナをサーバで起動し、リモートのMBPでjupyterlabを使う
  コンテナは、dockerも作成するが、通常使用としてはsingularityとする。
  今回は、家庭内のLAN環境内での使用とする。
  使用環境 サーバ（HP-Z820）  GPU0: Geforce GTX 1080 GPU1: Quadro K2000 driver ver.: 440.95.01 Ubuntu 18.04.4 LTS  クライアント（Mac Book Pro）  macOS Catalina 10.15.5  参考ページ このページを参考にした。大変参考になり、感謝。
手順 作業用ディレクトリを作成、必要ファイルを準備 $ mkdir pytorch-lab $ cd pytorch-lab 上記参考ページの記事を参考に、Dockerfileをこのディレクトリに作成。ベースとなるイメージは、ドライバーバージョンに合う比較的に新しいCUDAバージョンアップのpytorchを選択した。以下がDockerfileの内容。
FROM pytorch/pytorch:1.5.1-cuda10.1-cudnn7-runtime # Install required libraries RUN conda config --add channels pytorch \ &amp;amp;&amp;amp; conda config --append channels conda-forge \ &amp;amp;&amp;amp; conda update --all --yes --quiet \ &amp;amp;&amp;amp; conda install --yes --quiet \ ipywidgets \ jupyterlab \ matplotlib \ nodejs \ opencv \ pandas \ scikit-learn \ seaborn \ sympy \ &amp;amp;&amp;amp; conda clean --all -f -y # Install jupyter extensions RUN jupyter nbextension enable --py --sys-prefix widgetsnbextension \ &amp;amp;&amp;amp; jupyter labextension install @jupyter-widgets/jupyterlab-manager COPY jupyter_notebook_config.</description>
    </item>
    
  </channel>
</rss>